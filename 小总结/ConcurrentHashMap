## 底层数据结构

？再看一遍吧



## 基本

### 结构、字段、构造方法



Node结构，静态代码块，常量

```java
sizeCtl  //1、处于迁移流程线程数；2、-1正在初始化； 3、预定大小/阈值
MOVED  //正在扩容，对应fwd类型的节点的 hash hash hash 
table   //当前散列表的tab数组
nextTable  //只有扩容时用到
```



### 小函数分析



```java
spread扰动函数

tabAt、casTabAt、setTabAt、slot操作

resizeStamp扩容标示戳

tableSizeFor求最小二次方数
```



### 构造方法





## put写数据

put：

进入自旋，数据必能插入到散列表中。

1、数组为空，懒加载，延迟初始化

2、寻址找到指定的桶位，操作桶位使用cas方式put新值

3、正在搬移中，hash为MOVED，也就是FWD节点，该线程参与下一个桶位的搬移过程

4、检查是否有其他线程改变桶位数据，加sync锁，先假设是链表，进行链表的遍历，插到链表的尾部（遍历为了观测是否存在相同的key，需要替换操作）。剩余就是红黑树。

5、判断binCount：0FWD、1链表、2树，进入树化判断

6、最后addCount判断扩容。



总结slot的四种情况：

1、slot为空

2、slot正在搬移，hash为MOVE

3、slot为链表，遍历到结尾

4、slot为树，treeBin节点。



#### 初始化initTable





## 并发源码

addCount计数自增操作



Transfer并发扩容操作









## Get查询





## Remove删除Node节点





## Treebin


