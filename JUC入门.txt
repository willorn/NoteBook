JUC：
	是什么：工具类
	怎么玩：
		1.高内聚低耦合，线程操作资源类：实现买票
		2.Lock接口（synchronized与Lock区别）
		3.判断 干活 通知（防止虚假唤醒：while判断）
		4.辅助类：CountDownLatch+ CyclicBarrier+ Semaphore

Thread.State：
	6状态：new runnable blocking waiting timed_waiting terminated


synchronized与Lock的区别：
	1.首先synchronized是java内置关键字，在jvm层面，Lock是个java类；
	2.synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；
	3.synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；
	4.用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；
	5.synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）
	6.Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。


CAS：
	是什么：乐观锁
	能干什么：在线程安全的情况下对数据进行修改
	怎么玩：
		1.（1）读取i值；（2）加1；（3）将新值写回i
		2.优点：锁的粒度更小，性能更高
		3.缺点：ABA问题——添加版本信息AtomStampReference，使用CompareAndSet更加安全的CAS解决ABA问题。
		4.CAS自旋会造成性能问题
		5.只能对简单的类型进行操作


BlockingQueueDemo
	是什么：阻塞队列
	能干什么：将worker挂起
	怎么玩：
		1.常用：ArrayBlockingQueue、LinkedBlockingQueue
		2.操作：offer，poll，peek


ForkJoinPool：
	是什么：分治合并线程池
	怎么玩：
		1.ForkJoinTask（Future）、RecursiveTask（递归）、ForkJoinPool
		2.一般FutureTask多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。




